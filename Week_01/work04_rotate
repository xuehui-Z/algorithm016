解题1：
class Solution {
    public void rotate(int[] nums, int k) {
        int endNum, temp;
        for (int i=0;i<k;i++) {
            endNum = nums[nums.length-1];
            for (int j=0;j<nums.length;j++) {
                temp = nums[j];
                nums[j] = endNum;
                endNum = temp;
            }
        }
    }
}


解题2：
class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);

    }
    public void reverse(int[] nums,int start,int end) {
        int temp;
        while (start < end) {
            temp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = temp;
        }

    }
}

思路：先将数组反转      {1,2,3,4,5,6,7}  ==> {7,6,5,4,3,2,1}
	  将k(3)之前的反转  {7,6,5,4,3,2,1}  ==> {5,6,7,4,3,2,1}
	  将k(3)之后的反转  {5,6,7,4,3,2,1}  ==> {5,6,7,1,2,3,4}
	  

解题3：	  
public class Solution {
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int count = 0;
        for (int start = 0; count < nums.length; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % nums.length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }
    }
}
