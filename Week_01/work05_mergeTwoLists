class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        ListNode header = new ListNode();
        if (l1.val <= l2.val) {
            header = l1;
            mergeListToHead(header,l1.next,l2);
        } else {
            header = l2;
            mergeListToHead(header,l1,l2.next);
        }

        return header;
    }
    public void mergeListToHead(ListNode head, ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null) return;
        if (l1 == null) {
            head.next = l2;
            return;
        }
        if (l2 == null) {
            head.next = l1;
            return;
        }
        if (l1.val <= l2.val) {
            head.next = l1;
            ListNode temp = head.next;
            mergeListToHead(temp,l1.next,l2);
        } else {
            head.next = l2;
            ListNode temp = head.next;
            mergeListToHead(temp,l1,l2.next);
        }


    }
}