class MyCircularDeque {

    int[] deque;
    int size = 0;

    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        if (k < 0) throw new IllegalArgumentException("Size can not less than 0");
        deque = new int[k];
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if (size >= deque.length) return false;
        for (int i=size;i>0;) {
            deque[i] = deque[--i];
        }
        deque[0] = value;
        size++;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if (size >= deque.length) return false;
        deque[size++] = value;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(size==0) return false;
        for (int i = 0;i<size-1;) {
            deque[i] = deque[++i];
        }
        deque[--size] = -1;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(size==0) return false;
        deque[--size] = -1;
        return true;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        if(size==0) return -1;
        return deque[0];
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        if(size<=0) return -1;
        return deque[size-1];
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        if (size == 0) return true;
        else return false;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        if (size == deque.length) return true;
        else return false;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */